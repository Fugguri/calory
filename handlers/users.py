from aiogram import types
from aiogram import Dispatcher
from aiogram.dispatcher.handler import ctx_data
from aiogram.dispatcher import FSMContext

from .admin import admin
from db import Database
from models import *
from utils import _openai, calculate_calories, extract_food_data
from config.config import Config
from keyboards.keyboards import Keyboards

calculator = _openai.Calculator()


async def start(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    try:
        db.get_user(message.from_user.id)
    except:
        db.add_user(message.from_user)

    markup = await kb.start_kb()
    # video = open("docs/IMG_0951.MOV", 'rb')
    await message.answer(text=cfg.misc.messages.start, reply_markup=markup)
    await state.finish()
    try:
        pass
    except:
        await message.message.answer(cfg.misc.messages.start, reply_markup=markup)


async def calculate_calory(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']

    user = db.get_user(message.from_user.id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–ª–æ—Ä–∏–π.")
    await state.set_state("wait photo")


async def wait_photo(message: types.Message, state: FSMContext):
    kb: Keyboards = ctx_data.get()['keyboards']
    # path = await message.photo[0].download()
    await state.set_state("wait_photo_description")
    await state.update_data(photo=message.photo[0])
    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")


async def wait_photo_description(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    photo = await state.get_data("photo")
    path = await photo["photo"].download()
    mes = await message.answer("–í–µ–¥—É –ø–æ–¥—Å—á–µ—Ç...")
    result: str = await calculator.send_photo(path.name, message.text)
    food_data = extract_food_data(result)
    markup = await kb.back_kb("user")
    if food_data.calories != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
        markup = await kb.add_diary_record_kb(food_data)
    await mes.delete()
    await message.answer(result, reply_markup=markup)
    await state.finish()


async def add_record_to_diary(callback: types.CallbackQuery, state: FSMContext, callback_data: dict):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    # callory = callback_data.get("amount")
    # food_data = FoodData(calories=callory)
    dish = callback_data.get("d")
    protein = callback_data.get("pr")
    calories = callback_data.get("cal")
    grams = callback_data.get("gr")
    carbs = callback_data.get("carbs")
    fats = callback_data.get("fats")
    food_data = FoodData(
        dish=dish,
        protein=protein,
        calories=calories,
        grams=grams,
        carbs=carbs,
        fats=fats,

    )

    db.add_diary_record(callback.from_user.id, food_data)
    amount_daily_calory = db.get_amount_daily_records(callback.from_user.id)
    user: User = db.get_user(callback.from_user.id)
    if not user.subscription:
        db.update_free_diary_records(callback.from_user.id)
    await callback.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫")
    if amount_daily_calory > user.daily_calory:
        await callback.message.answer(f"–í–Ω–∏–º–∞–Ω–∏–µ!!!\n–ö–∞–ª–æ—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n{amount_daily_calory}/{user.daily_calory}")


async def add_record_to_errors(callback: types.CallbackQuery, state: FSMContext, callback_data: dict):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    # callory = callback_data.get("amount")
    dish = callback_data.get("d")
    protein = callback_data.get("cal")
    calories = callback_data.get("pr")
    grams = callback_data.get("gr")
    carbs = callback_data.get("carbs")
    fats = callback_data.get("fats")
    food_data = FoodData(
        dish=dish,
        protein=protein,
        calories=calories,
        grams=grams,
        carbs=carbs,
        fats=fats,

    )
    db.add_diary_record(callback.from_user.id, food_data)
    amount_daily_calory = db.get_amount_daily_records(callback.from_user.id)
    user: User = db.get_user(callback.from_user.id)

    await callback.message.answer("–î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    if amount_daily_calory > user.daily_calory:
        await callback.message.answer(f"–í–Ω–∏–º–∞–Ω–∏–µ!!!\n–ö–∞–ª–æ—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n{amount_daily_calory}/{user.daily_calory}")


async def diary(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    user: User = db.get_user(message.from_user.id)
    text = "<b><i>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</i></b>:\n"
    await state.finish()
    amount_daily_calory = db.get_amount_daily_records(message.from_user.id)

    result = text+user.__repr__()
    if amount_daily_calory > user.daily_calory:
        result += f"–í–Ω–∏–º–∞–Ω–∏–µ!!!\n–ö–∞–ª–æ—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n{amount_daily_calory}/{user.daily_calory}"
    else:
        result += f"\n–ù–∞–±—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {amount_daily_calory}/{user.daily_calory}"
    await message.answer(result)


async def settings(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç", reply_markup=markup)
    await state.set_state('wait height')


async def wait_height(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await state.update_data(height=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å", reply_markup=markup)
    await state.set_state('wait weight')


async def wait_weight(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await state.update_data(weight=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=markup)
    await state.set_state('wait age')


async def wait_age(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    await state.update_data(age=message.text)
    markup = await kb.sex_kb()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", reply_markup=markup)
    await state.set_state('wait sex')


async def wait_sex(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.activity_kb()
    await state.update_data(sex=callback.data)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", reply_markup=markup)
    await state.set_state('wait activity')


async def wait_activity(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.goal_kb()
    await state.update_data(activity=callback.data)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å", reply_markup=markup)
    await state.set_state('wait goal')


async def wait_goal(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.confirm_settings_kb()
    await state.update_data(goal=callback.data)
    data = await state.get_data()
    setting = Settings(**data)
    await callback.message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n{setting.__repr__()}", reply_markup=markup)
    await state.set_state('confirm settings')


async def confirm_settings(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    data = await state.get_data()
    settings = Settings(**data)
    calory = calculate_calories(settings)
    db.update_user_data(callback.from_user.id, settings)
    db.update_daily_calory(callback.from_user.id, calory)
    await callback.message.answer(f"–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ - {calory}")
    await state.finish()


async def payment(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']

    user = db.get_user(message.from_user.id)
    multiplier = 1 - user.discount/100
    summ = int(399 * multiplier)
    markup = await kb.subscription_kb()
    await message.answer(f"""–ü—Ä–µ–º–∏—É–º –ü–æ–¥–ø–∏—Å–∫–∞ üåü
–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: 
1. –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞ 1 –º–µ—Å—è—Ü
2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ —Ñ–æ—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞ 
3. –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ  –∫–∞–ª–æ—Ä–∏–π

–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: 390 —Ä—É–±–ª–µ–π 

–í –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ:
- –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä –ø–æ–¥ —Ä—É–∫–æ–π. –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ—Å—Ç–∞–≤–∏—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É. 
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä, –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–ª–∞–Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.""", reply_markup=markup)


async def set_wait_bill(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']

    await state.set_state("wait_bill")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —á–µ–∫–æ–º –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\
\n–ß–µ–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")


async def wait_bill(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.confirm_bill_kb(message.from_user.id)
    if message.text is not None:
        await message.bot.send_message(-1002146651809, message.text, reply_markup=markup)
    elif message.photo is not None:
        await message.bot.send_photo(chat_id=-1002146651809, photo=message.photo[-1].file_id,
                                     caption=message.caption, reply_markup=markup)
    elif message.document is not None:
        await message.bot.send_document(chat_id=-1002146651809, document=message.document.file_id,
                                        caption=message.caption, reply_markup=markup)
    markup = await kb.start_kb()
    await state.finish()
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", reply_markup=markup)


async def confirm_bill(callback: types.CallbackQuery, state: FSMContext, callback_data: dict):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']

    user_id = callback_data.get("user_id")

    match callback_data.get("command"):
        case "confirm":
            db.set_month_subscription(user_id)
            await callback.message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–≤–ª–µ–Ω–æ")
            await callback.bot.send_message(user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        case "decline":
            await callback.bot.send_message(user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @son2421")
            await callback.message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.")
        case "user_info":
            user = db.get_user(user_id)
            await callback.message.answer(f"ID telegram {str(user.user_id)} username: @{user.username}")


async def set_wait_promo_code(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']

    markup = await kb.back_kb("user")
    await state.set_state("wait_promo_code")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥", reply_markup=markup)


async def wait_promo_code(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']

    promo = db.get_promo_by_code(message.text)
    if not promo:
        markup = await kb.back_kb("user")
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!", reply_markup=markup)
        return
    markup = await kb.subscription_kb()
    db.update_user_discount(message.from_user.id, promo.percent)
    await state.finish()

    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω, –∑–∞ –≤–∞–º–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ <b>{promo.percent}%</b>.")


async def wait_text(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    openai = ctx_data.get()['openai']

    result: str = await _openai.text(message.text, openai)

    await message.answer(result)


async def back(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    data = await state.get_data()
    markup = await kb.start_kb()
    await callback.message.answer(cfg.misc.messages.start, reply_markup=markup)
    await state.finish()


def register_user_handlers(dp: Dispatcher, kb: Keyboards):
    dp.register_message_handler(start, commands=["start"], state="*")
    dp.register_message_handler(diary, regexp="–î–Ω–µ–≤–Ω–∏–∫", state="*")
    dp.register_message_handler(
        calculate_calory, regexp="–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–ª–æ—Ä–∏–π", state="*")

    dp.register_message_handler(payment, regexp="–ü–æ–¥–ø–∏—Å–∫–∞", state="*")
    dp.register_callback_query_handler(
        set_wait_promo_code, lambda x: x.data == "set_wait_promo_code", state="*")
    dp.register_message_handler(
        wait_promo_code, state="wait_promo_code")
    dp.register_callback_query_handler(
        set_wait_bill, lambda x: x.data == "set_send_bill", state="*")
    dp.register_message_handler(wait_bill,
                                content_types=[types.ContentType.PHOTO,
                                               types.ContentTypes.PHOTO,
                                               ], state="wait_bill")
    dp.register_callback_query_handler(
        confirm_bill, kb.confirm_bill_cb.filter(), state="*")

    dp.register_message_handler(
        settings, regexp="–í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ", state="*")
    dp.register_message_handler(wait_height, state="wait height")
    dp.register_message_handler(wait_weight, state="wait weight")
    dp.register_message_handler(wait_age, state="wait age")
    dp.register_callback_query_handler(wait_sex, state="wait sex")
    dp.register_callback_query_handler(wait_goal, state="wait goal")
    dp.register_callback_query_handler(wait_activity, state="wait activity")
    dp.register_callback_query_handler(
        confirm_settings, state="confirm settings")
    dp.register_callback_query_handler(
        add_record_to_diary, kb.add_calory_diary_cd.filter(), state="*")
    dp.register_callback_query_handler(
        add_record_to_errors, kb.add_dish_to_error_list_cd.filter(), state="*")
    dp.register_callback_query_handler(back, kb.back_cd.filter(), state="*")
    dp.register_message_handler(wait_photo,
                                content_types=[types.ContentType.PHOTO,
                                               types.ContentTypes.PHOTO,
                                               ], state="wait photo")
    dp.register_message_handler(
        wait_photo_description, state="wait_photo_description")

    # dp.register_message_handler(wait_text,
    #                             content_types=[types.ContentType.TEXT,
    #                                            types.ContentTypes.TEXT,
    #                                            ], )
