from .users import user_food_data
from aiogram import types
from aiogram import Dispatcher
from aiogram.dispatcher.handler import ctx_data
from aiogram.dispatcher import FSMContext

from .admin import admin
from db import Database
from models import *
from utils import _openai, calculate_calories, extract_food_data
from config.config import Config
from keyboards.keyboards import Keyboards

calculator = _openai.Calculator()


async def go_educate(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await callback.message.answer("–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=markup)
    await state.set_state('educate wait name')


async def educate_wait_name(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?", reply_markup=markup)
    await state.set_state('educate wait age')


async def educate_wait_age(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await state.update_data(age=message.text)
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?", reply_markup=markup)
    await state.set_state('educate wait height')


async def educate_wait_height(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.back_kb("user")
    await state.update_data(height=message.text)
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å—å –≤ –∫–≥?", reply_markup=markup)
    await state.set_state('educate wait weight')


async def educate_wait_weight(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    await state.update_data(weight=message.text)
    markup = await kb.sex_kb()
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª", reply_markup=markup)
    await state.set_state('educate wait sex')


async def educate_wait_sex(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.activity_kb()
    await state.update_data(sex=callback.data)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", reply_markup=markup)
    await state.set_state('educate wait activity')


async def educate_wait_activity(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.goal_kb()
    await state.update_data(activity=callback.data)
    await callback.message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=markup)
    await state.set_state('educate wait goal')


async def educate_wait_goal(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    markup = await kb.confirm_settings_kb()
    await state.update_data(goal=callback.data)
    data = await state.get_data()
    setting = Settings(**data)
    await callback.message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n{setting.__repr__()}", reply_markup=markup)
    await state.set_state('educate confirm settings')


async def educate_confirm_settings(callback: types.CallbackQuery, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    data = await state.get_data()
    settings = Settings(**data)
    calory = calculate_calories(settings)
    db.update_user_data(callback.from_user.id, settings)
    db.update_daily_calory(callback.from_user.id, calory)
    markup = await kb.education_count_callory_kb()
    await callback.message.answer(
        (
            '''–û—Ç–ª–∏—á–Ω–æ!\n
–¢—ã —Å–¥–µ–ª–∞–ª(–∞) –≤–∞–∂–Ω—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏!
–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ:
–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π —Å–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π".
–Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—ë –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–∞–≤–µ –±–ª—é–¥–∞.
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ.
–¢–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å, –∫—Ä–æ–º–µ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É!
–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!
–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π".
–ü—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.
–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–≤–æ—é –º–µ—á—Ç—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é!'''

        ),
        reply_markup=markup
    )
    await state.finish()


async def educate_count_callory_photo(callback: types.CallbackQuery, state: FSMContext):
    kb: Keyboards = ctx_data.get()['keyboards']
    await state.set_state('educate wait photo')
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ë–ñ–£.")


async def educate_wait_photo(message: types.Message, state: FSMContext):
    kb: Keyboards = ctx_data.get()['keyboards']

    # path = await message.photo[0].download()

    await state.update_data(photo=message.photo[0])

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! üì∏ –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª—é–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ "–æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç" –∏–ª–∏ "–∫—É—Ä–∏–Ω—ã–π —Å—É–ø", –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —ç—Ç–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –µ—â—ë –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º. –ñ–¥—É —Ç–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è! ü•óüç≤')

    await state.set_state("educate wait_photo_description")


async def educate_wait_photo_description(message: types.Message, state: FSMContext):
    cfg: Config = ctx_data.get()['config']
    kb: Keyboards = ctx_data.get()['keyboards']
    db: Database = ctx_data.get()['db']
    photo = await state.get_data("photo")
    path = await photo["photo"].download()
    mes = await message.answer("–í–µ–¥—É –ø–æ–¥—Å—á–µ—Ç...")
    print(message.from_user.id)
    try:
        user: User = db.get_user(message.from_user.id)
    except:
        markup = await kb.wait_user_data_kb()
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=markup)
        return
    result: str = await calculator.send_photo(path.name, message.text, user.daily_calory)
    print(result)
    food_data = extract_food_data(result)
    user_food_data[message.from_user.id] = food_data
    markup = await kb.back_kb("user")
    if food_data.calories != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
        markup = await kb.add_diary_record_kb(food_data)
    text = await calculator.create_educate_answer(food_data=food_data, user=user)
    await message.answer(text, reply_markup=markup)
    await mes.delete()
    # await message.answer(result+'\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ë–ñ–£. –ß—Ç–æ–±—ã –¥–∞–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ', reply_markup=markup)
    markup = await kb.start_kb()

    await message.answer(f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user.free_diary_records} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º SlimFoto.\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∫–∞"', reply_markup=markup)


def register_education_handlers(dp: Dispatcher, kb: Keyboards):

    dp.register_callback_query_handler(
        go_educate, lambda x: x.data == "wait_user_data", state="*")
    dp.register_message_handler(
        educate_wait_name, state="educate wait name")
    dp.register_message_handler(educate_wait_age, state="educate wait age")
    dp.register_message_handler(
        educate_wait_height, state="educate wait height")
    dp.register_message_handler(
        educate_wait_weight, state="educate wait weight")
    dp.register_callback_query_handler(
        educate_wait_sex, state="educate wait sex")
    dp.register_callback_query_handler(
        educate_wait_goal, state="educate wait goal")
    dp.register_callback_query_handler(
        educate_wait_activity, state="educate wait activity")
    dp.register_callback_query_handler(
        educate_confirm_settings, state="educate confirm settings")
    # dp.register_callback_query_handler(
    #     educate_add_record_to_diary, kb.add_calory_diary_cd.filter(), state="*")
    # dp.register_callback_query_handler(
    #     add_record_to_errors, kb.add_dish_to_error_list_cd.filter(), state="*")
    dp.register_callback_query_handler(
        educate_count_callory_photo, lambda x: x.data == "education_count_callory", state="*")

    dp.register_message_handler(educate_wait_photo,
                                content_types=[types.ContentType.PHOTO,
                                               types.ContentTypes.PHOTO,
                                               ], state="educate wait photo")
    dp.register_message_handler(
        educate_wait_photo_description, state="educate wait_photo_description")
